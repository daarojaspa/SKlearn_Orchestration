from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import numpy as np
import pickle

app = FastAPI()

# Load pre-trained model and scaler
with open("model.pkl", "rb") as f:
    model = pickle.load(f)

with open("scaler.pkl", "rb") as f:
    scaler = pickle.load(f)

# Define input format
class InputData(BaseModel):
    feature1: float
    feature2: float

# Preprocessing function
def preprocess_input(data: InputData):
    # Basic range validation (example)
    if not (0 <= data.feature1 <= 100):
        raise HTTPException(status_code=400, detail="feature1 out of range")
    
    features = np.array([[data.feature1, data.feature2]])
    return scaler.transform(features)

# Prediction endpoint
@app.post("/predict/")
def predict(data: InputData):
    try:
        processed = preprocess_input(data)
        prediction = model.predict(processed)
        return {"prediction": prediction[0]}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Prediction failed: {str(e)}
# ✅ API key configuration
API_KEY = "supersecret123"
API_KEY_NAME = "X-API-Key"

# ✅ Dependency to verify API key
def verify_api_key(x_api_key: str = Header(...)):
    if x_api_key != API_KEY:
        raise HTTPException(status_code=403, detail="Unauthorized")

# ✅ Protected endpoint
@app.post("/predict/")
def predict(data: InputData, auth: None = Depends(verify_api_key)):
    features = [[data.feature1, data.feature2]]
    prediction = model.predict(features)
    return {"prediction": prediction[0]}
